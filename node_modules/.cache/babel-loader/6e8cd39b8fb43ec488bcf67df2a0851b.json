{"ast":null,"code":"import { Figure, FigureNames } from \"./Figure\";\nimport { Colors } from \"../Colors\";\nimport whiteicon from \"../../icons/white-pawn.png\";\nimport blackicon from \"../../icons/black-pawn.png\";\nexport class Pawn extends Figure {\n  constructor(color, cell) {\n    super(color, cell);\n    this.isFirstStep = true;\n    this.icon = color === Colors.WHITE ? whiteicon : blackicon;\n    this.name = FigureNames.PAWN;\n  }\n  canMove(target) {\n    var _this$cell$figure, _this$cell$figure2;\n    if (!super.canMove(target)) return false;\n    const direction = ((_this$cell$figure = this.cell.figure) === null || _this$cell$figure === void 0 ? void 0 : _this$cell$figure.color) === Colors.BLACK ? 1 : -1;\n    const firstStepDirection = ((_this$cell$figure2 = this.cell.figure) === null || _this$cell$figure2 === void 0 ? void 0 : _this$cell$figure2.color) === Colors.BLACK ? 2 : -2;\n    if ((target.y === this.cell.y + direction || this.isFirstStep && target.y === this.cell.y + firstStepDirection) && target.x === this.cell.x && this.cell.board.getCell(target.x, target.y).isEmpty()) return true;\n    return false;\n  }\n  moveFigure(target) {\n    super.moveFigure(target);\n    this.isFirstStep = false;\n  }\n}","map":{"version":3,"names":["Figure","FigureNames","Colors","whiteicon","blackicon","Pawn","constructor","color","cell","isFirstStep","icon","WHITE","name","PAWN","canMove","target","direction","figure","BLACK","firstStepDirection","y","x","board","getCell","isEmpty","moveFigure"],"sources":["D:/chess/chess/src/models/figures/Pawn.ts"],"sourcesContent":["import {Figure, FigureNames} from \"./Figure\";\r\nimport {Colors} from \"../Colors\";\r\nimport {Cell} from \"../Cell\";\r\nimport whiteicon from \"../../icons/white-pawn.png\";\r\nimport blackicon from \"../../icons/black-pawn.png\";\r\n\r\nexport class Pawn extends Figure\r\n{\r\n    isFirstStep: boolean = true;\r\n    constructor(color: Colors, cell: Cell)\r\n    {\r\n        super(color,cell);\r\n        this.icon = color === Colors.WHITE ? whiteicon : blackicon;\r\n        this.name = FigureNames.PAWN;\r\n    }\r\n\r\n    canMove(target: Cell): boolean\r\n    {\r\n        if(!super.canMove(target)) return false;\r\n        const direction = this.cell.figure?.color === Colors.BLACK ? 1 : -1;\r\n        const firstStepDirection = this.cell.figure?.color === Colors.BLACK ? 2 : -2;\r\n        if((target.y === this.cell.y + direction || this.isFirstStep && (target.y === this.cell.y + firstStepDirection)) && target.x === this.cell.x && this.cell.board.getCell(target.x, target.y).isEmpty()) return true;\r\n        return false;\r\n    }\r\n    moveFigure(target: Cell) {\r\n        super.moveFigure(target);\r\n        this.isFirstStep = false;\r\n    }\r\n}"],"mappings":"AAAA,SAAQA,MAAM,EAAEC,WAAW,QAAO,UAAU;AAC5C,SAAQC,MAAM,QAAO,WAAW;AAEhC,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,SAAS,MAAM,4BAA4B;AAElD,OAAO,MAAMC,IAAI,SAASL,MAAM,CAChC;EAEIM,WAAW,CAACC,KAAa,EAAEC,IAAU,EACrC;IACI,KAAK,CAACD,KAAK,EAACC,IAAI,CAAC;IAAC,KAHtBC,WAAW,GAAY,IAAI;IAIvB,IAAI,CAACC,IAAI,GAAGH,KAAK,KAAKL,MAAM,CAACS,KAAK,GAAGR,SAAS,GAAGC,SAAS;IAC1D,IAAI,CAACQ,IAAI,GAAGX,WAAW,CAACY,IAAI;EAChC;EAEAC,OAAO,CAACC,MAAY,EACpB;IAAA;IACI,IAAG,CAAC,KAAK,CAACD,OAAO,CAACC,MAAM,CAAC,EAAE,OAAO,KAAK;IACvC,MAAMC,SAAS,GAAG,0BAAI,CAACR,IAAI,CAACS,MAAM,sDAAhB,kBAAkBV,KAAK,MAAKL,MAAM,CAACgB,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IACnE,MAAMC,kBAAkB,GAAG,2BAAI,CAACX,IAAI,CAACS,MAAM,uDAAhB,mBAAkBV,KAAK,MAAKL,MAAM,CAACgB,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5E,IAAG,CAACH,MAAM,CAACK,CAAC,KAAK,IAAI,CAACZ,IAAI,CAACY,CAAC,GAAGJ,SAAS,IAAI,IAAI,CAACP,WAAW,IAAKM,MAAM,CAACK,CAAC,KAAK,IAAI,CAACZ,IAAI,CAACY,CAAC,GAAGD,kBAAmB,KAAKJ,MAAM,CAACM,CAAC,KAAK,IAAI,CAACb,IAAI,CAACa,CAAC,IAAI,IAAI,CAACb,IAAI,CAACc,KAAK,CAACC,OAAO,CAACR,MAAM,CAACM,CAAC,EAAEN,MAAM,CAACK,CAAC,CAAC,CAACI,OAAO,EAAE,EAAE,OAAO,IAAI;IAClN,OAAO,KAAK;EAChB;EACAC,UAAU,CAACV,MAAY,EAAE;IACrB,KAAK,CAACU,UAAU,CAACV,MAAM,CAAC;IACxB,IAAI,CAACN,WAAW,GAAG,KAAK;EAC5B;AACJ"},"metadata":{},"sourceType":"module"}