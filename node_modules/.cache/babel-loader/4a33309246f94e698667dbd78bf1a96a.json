{"ast":null,"code":"import { Colors } from \"./Colors\";\nexport class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.availible = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.board = board;\n    this.figure = figure;\n    this.availible = false;\n    this.id = Math.random();\n  }\n  isEmpty() {\n    return this.figure !== null;\n  }\n  isEnemy(target) {\n    if (target.figure) {\n      var _this$figure;\n      return ((_this$figure = this.figure) === null || _this$figure === void 0 ? void 0 : _this$figure.color) !== target.figure.color;\n    }\n    return false;\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) return false;\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let i = min + 1; i < max; i++) {\n      if (this.board.getCell(this.x, i).isEmpty()) return false;\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) return false;\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let i = min + 1; i < max; i++) {\n      if (this.board.getCell(i, this.y).isEmpty()) return false;\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absY !== absX) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  addLostFigure(figure) {\n    figure.color === Colors.WHITE ? this.board.lostWhiteFigures.push(figure) : this.board.lostBlackFigures.push(figure);\n  }\n  moveFigure(target) {\n    var _this$figure2;\n    if (this.figure && (_this$figure2 = this.figure) !== null && _this$figure2 !== void 0 && _this$figure2.canMove(target)) {\n      var _this$figure3;\n      (_this$figure3 = this.figure) === null || _this$figure3 === void 0 ? void 0 : _this$figure3.moveFigure(target);\n      if (target.figure) {\n        this.addLostFigure(target.figure);\n      }\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n}","map":{"version":3,"names":["Colors","Cell","constructor","board","x","y","color","figure","availible","id","Math","random","isEmpty","isEnemy","target","isEmptyVertical","min","max","i","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","setFigure","cell","addLostFigure","WHITE","lostWhiteFigures","push","lostBlackFigures","moveFigure","canMove"],"sources":["D:/ыыыы/Chess/src/models/Cell.ts"],"sourcesContent":["import {Board} from \"./Board\";\r\nimport {Colors} from \"./Colors\";\r\nimport {Figure, FigureNames} from \"./figures/Figure\";\r\n\r\nexport class Cell\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n    readonly color: Colors;\r\n    figure: Figure | null;\r\n    board: Board;\r\n    availible: boolean;\r\n    id: number;\r\n\r\n    constructor(board: Board, x: number, y: number, color: Colors, figure: Figure | null)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color;\r\n        this.board = board;\r\n        this.figure = figure;\r\n        this.availible = false;\r\n        this.id = Math.random();\r\n    }\r\n\r\n\r\n    isEmpty(): boolean\r\n    {\r\n        return this.figure !== null;\r\n    }\r\n\r\n    isEnemy(target: Cell): boolean\r\n    {\r\n        if (target.figure) {\r\n            return this.figure?.color !== target.figure.color;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isEmptyVertical(target: Cell): boolean\r\n    {\r\n        if (this.x !== target.x) return false;\r\n\r\n        const min = Math.min(this.y, target.y);\r\n        const max = Math.max(this.y, target.y);\r\n        for (let i = min + 1; i < max; i++) {\r\n            if (this.board.getCell(this.x, i).isEmpty()) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isEmptyHorizontal(target: Cell): boolean\r\n    {\r\n        if (this.y !== target.y) return false;\r\n\r\n        const min = Math.min(this.x, target.x);\r\n        const max = Math.max(this.x, target.x);\r\n        for (let i = min + 1; i < max; i++) {\r\n            if (this.board.getCell(i, this.y).isEmpty()) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isEmptyDiagonal(target: Cell): boolean\r\n    {\r\n        const absX = Math.abs(target.x - this.x);\r\n        const absY = Math.abs(target.y - this.y);\r\n        if (absY !== absX) return false;\r\n        const dy = this.y < target.y ? 1 : -1;\r\n        const dx = this.x < target.x ? 1 : -1;\r\n        for (let i = 1; i < absY; i++) {\r\n            if (this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setFigure(figure: Figure)\r\n    {\r\n        this.figure = figure;\r\n        this.figure.cell = this;\r\n    }\r\n\r\n    addLostFigure(figure: Figure)\r\n    {\r\n        figure.color === Colors.WHITE ? this.board.lostWhiteFigures.push(figure) : this.board.lostBlackFigures.push(figure);\r\n    }\r\n\r\n    moveFigure(target: Cell)\r\n    {\r\n        if (this.figure && this.figure?.canMove(target)) {\r\n            this.figure?.moveFigure(target);\r\n            if (target.figure) {\r\n                this.addLostFigure(target.figure);\r\n            }\r\n            target.setFigure(this.figure);\r\n            this.figure = null;\r\n        }\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}