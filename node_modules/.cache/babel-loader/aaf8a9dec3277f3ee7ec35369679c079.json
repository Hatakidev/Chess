{"ast":null,"code":"import { Figure, FigureNames } from \"./Figure\";\nimport { Colors } from \"../Colors\";\nimport whiteicon from \"../../icons/white-king.png\";\nimport blackicon from \"../../icons/black-king.png\";\nexport class King extends Figure {\n  constructor(color, cell) {\n    super(color, cell);\n    this.icon = color === Colors.WHITE ? whiteicon : blackicon;\n    this.name = FigureNames.KING;\n  }\n  canMove(target) {\n    if (!super.canMove(target)) return false;\n    const dx = Math.abs(this.cell.x - target.x);\n    const dy = Math.abs(this.cell.y - target.y);\n    if (this.cell.isEmptyVertical(target)) return dx === 0 && dy === 1;\n    if (this.cell.isEmptyHorizontal(target)) return dx === 1 && dy === 0;\n    if (this.cell.isEmptyDiagonal(target)) return dx === 1 && dy === 1;\n    return false;\n  }\n  underAttack(figure, target) {}\n}","map":{"version":3,"names":["Figure","FigureNames","Colors","whiteicon","blackicon","King","constructor","color","cell","icon","WHITE","name","KING","canMove","target","dx","Math","abs","x","dy","y","isEmptyVertical","isEmptyHorizontal","isEmptyDiagonal","underAttack","figure"],"sources":["D:/ыыыы/Chess/src/models/figures/King.ts"],"sourcesContent":["import {Figure, FigureNames} from \"./Figure\";\r\nimport {Colors} from \"../Colors\";\r\nimport {Cell} from \"../Cell\";\r\nimport whiteicon from \"../../icons/white-king.png\";\r\nimport blackicon from \"../../icons/black-king.png\";\r\n\r\nexport class King extends Figure\r\n{\r\n    constructor(color: Colors, cell: Cell)\r\n    {\r\n        super(color,cell);\r\n        this.icon = color === Colors.WHITE ? whiteicon : blackicon;\r\n        this.name = FigureNames.KING;\r\n    }\r\n\r\n    canMove(target: Cell): boolean\r\n    {\r\n        if(!super.canMove(target)) return false;\r\n        const dx = Math.abs(this.cell.x - target.x);\r\n        const dy = Math.abs(this.cell.y - target.y);\r\n        if(this.cell.isEmptyVertical(target)) return (dx === 0 && dy === 1);\r\n        if(this.cell.isEmptyHorizontal(target)) return (dx === 1 && dy === 0);\r\n        if(this.cell.isEmptyDiagonal(target)) return (dx === 1 && dy === 1);\r\n        return false;\r\n    }\r\n    underAttack(figure: Figure, target: Cell)\r\n    {\r\n\r\n    }\r\n}"],"mappings":"AAAA,SAAQA,MAAM,EAAEC,WAAW,QAAO,UAAU;AAC5C,SAAQC,MAAM,QAAO,WAAW;AAEhC,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,SAAS,MAAM,4BAA4B;AAElD,OAAO,MAAMC,IAAI,SAASL,MAAM,CAChC;EACIM,WAAW,CAACC,KAAa,EAAEC,IAAU,EACrC;IACI,KAAK,CAACD,KAAK,EAACC,IAAI,CAAC;IACjB,IAAI,CAACC,IAAI,GAAGF,KAAK,KAAKL,MAAM,CAACQ,KAAK,GAAGP,SAAS,GAAGC,SAAS;IAC1D,IAAI,CAACO,IAAI,GAAGV,WAAW,CAACW,IAAI;EAChC;EAEAC,OAAO,CAACC,MAAY,EACpB;IACI,IAAG,CAAC,KAAK,CAACD,OAAO,CAACC,MAAM,CAAC,EAAE,OAAO,KAAK;IACvC,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACT,IAAI,CAACU,CAAC,GAAGJ,MAAM,CAACI,CAAC,CAAC;IAC3C,MAAMC,EAAE,GAAGH,IAAI,CAACC,GAAG,CAAC,IAAI,CAACT,IAAI,CAACY,CAAC,GAAGN,MAAM,CAACM,CAAC,CAAC;IAC3C,IAAG,IAAI,CAACZ,IAAI,CAACa,eAAe,CAACP,MAAM,CAAC,EAAE,OAAQC,EAAE,KAAK,CAAC,IAAII,EAAE,KAAK,CAAC;IAClE,IAAG,IAAI,CAACX,IAAI,CAACc,iBAAiB,CAACR,MAAM,CAAC,EAAE,OAAQC,EAAE,KAAK,CAAC,IAAII,EAAE,KAAK,CAAC;IACpE,IAAG,IAAI,CAACX,IAAI,CAACe,eAAe,CAACT,MAAM,CAAC,EAAE,OAAQC,EAAE,KAAK,CAAC,IAAII,EAAE,KAAK,CAAC;IAClE,OAAO,KAAK;EAChB;EACAK,WAAW,CAACC,MAAc,EAAEX,MAAY,EACxC,CAEA;AACJ"},"metadata":{},"sourceType":"module"}