{"ast":null,"code":"var _jsxFileName = \"D:\\\\chess\\\\chess\\\\src\\\\components\\\\BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CellComponent from \"./CellComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardComponent = _ref => {\n  _s();\n  let {\n    board,\n    setBoard\n  } = _ref;\n  const [selectedCell, setSelectedCell] = useState(null);\n  function click(cell) {\n    var _selectedCell$figure;\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) if (cell.figure) setSelectedCell(cell);\n  }\n  useEffect(() => {\n    highlightCells();\n  }, [selectedCell]);\n  function highlightCells() {\n    board.highlightCells(selectedCell);\n    updateBoard();\n  }\n  function updateBoard() {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n        click: click,\n        cell: cell,\n        selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n      }, cell.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }, this))\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(BoardComponent, \"OFVjm5mk704+5WCzFQLJg89Ag6Q=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","BoardComponent","board","setBoard","selectedCell","setSelectedCell","click","cell","figure","canMove","highlightCells","updateBoard","newBoard","getCopyBoard","cells","map","row","index","x","y","id"],"sources":["D:/chess/chess/src/components/BoardComponent.tsx"],"sourcesContent":["import React, {FC, useEffect, useState} from \"react\";\r\nimport {Board} from \"../models/Board\";\r\nimport CellComponent from \"./CellComponent\";\r\nimport {Cell} from \"../models/Cell\";\r\ninterface BoardProps\r\n{\r\n    board: Board;\r\n    setBoard: (board: Board) => void;\r\n}\r\nconst BoardComponent: FC<BoardProps> = ({board, setBoard}) =>\r\n{\r\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\r\n    function click(cell: Cell)\r\n    {\r\n        if(selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell))\r\n        if(cell.figure) setSelectedCell(cell);\r\n    }\r\n    useEffect(() =>{\r\n        highlightCells();\r\n    }, [selectedCell]);\r\n    function highlightCells()\r\n    {\r\n        board.highlightCells(selectedCell);\r\n        updateBoard();\r\n    }\r\n    function updateBoard()\r\n    {\r\n        const newBoard = board.getCopyBoard();\r\n        setBoard(newBoard);\r\n    }\r\n    return(\r\n        \r\n        <div className=\"board\">\r\n            {board.cells.map((row:Cell[], index: number) =>\r\n                <React.Fragment key={index}>\r\n                    {row.map(cell =>\r\n                        <CellComponent\r\n                            click={click}\r\n                            cell={cell} \r\n                            key={cell.id}\r\n                            selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\r\n                        />\r\n                    )}\r\n                </React.Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAOC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEpD,OAAOC,aAAa,MAAM,iBAAiB;AAAC;AAO5C,MAAMC,cAA8B,GAAG,QACvC;EAAA;EAAA,IADwC;IAACC,KAAK;IAAEC;EAAQ,CAAC;EAErD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAc,IAAI,CAAC;EACnE,SAASO,KAAK,CAACC,IAAU,EACzB;IAAA;IACI,IAAGH,YAAY,IAAIA,YAAY,KAAKG,IAAI,4BAAIH,YAAY,CAACI,MAAM,iDAAnB,qBAAqBC,OAAO,CAACF,IAAI,CAAC,EAC9E,IAAGA,IAAI,CAACC,MAAM,EAAEH,eAAe,CAACE,IAAI,CAAC;EACzC;EACAT,SAAS,CAAC,MAAK;IACXY,cAAc,EAAE;EACpB,CAAC,EAAE,CAACN,YAAY,CAAC,CAAC;EAClB,SAASM,cAAc,GACvB;IACIR,KAAK,CAACQ,cAAc,CAACN,YAAY,CAAC;IAClCO,WAAW,EAAE;EACjB;EACA,SAASA,WAAW,GACpB;IACI,MAAMC,QAAQ,GAAGV,KAAK,CAACW,YAAY,EAAE;IACrCV,QAAQ,CAACS,QAAQ,CAAC;EACtB;EACA,oBAEI;IAAK,SAAS,EAAC,OAAO;IAAA,UACjBV,KAAK,CAACY,KAAK,CAACC,GAAG,CAAC,CAACC,GAAU,EAAEC,KAAa,kBACvC,QAAC,KAAK,CAAC,QAAQ;MAAA,UACVD,GAAG,CAACD,GAAG,CAACR,IAAI,iBACT,QAAC,aAAa;QACV,KAAK,EAAED,KAAM;QACb,IAAI,EAAEC,IAAK;QAEX,QAAQ,EAAEA,IAAI,CAACW,CAAC,MAAKd,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEc,CAAC,KAAIX,IAAI,CAACY,CAAC,MAAKf,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEe,CAAC;MAAC,GAD9DZ,IAAI,CAACa,EAAE;QAAA;QAAA;QAAA;MAAA,QAEd;IACL,GARgBH,KAAK;MAAA;MAAA;MAAA;IAAA,QAST;EACpB;IAAA;IAAA;IAAA;EAAA,QACC;AAEd,CAAC;AAAC,GAtCIhB,cAA8B;AAAA,KAA9BA,cAA8B;AAwCpC,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module"}