{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u044B\\u044B\\u044B\\u044B\\\\Chess\\\\src\\\\components\\\\BoardComponent.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CellComponent from \"./CellComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardComponent = _ref => {\n  _s();\n  let {\n    board,\n    setBoard,\n    currentPlayer,\n    swapPlayer\n  } = _ref;\n  const [selectedCell, setSelectedCell] = useState(null);\n  function click(cell) {\n    var _selectedCell$figure;\n    if (selectedCell && selectedCell !== cell && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(cell)) {\n      selectedCell.moveFigure(cell);\n      swapPlayer();\n      setSelectedCell(null);\n    } else {\n      var _cell$figure;\n      if (((_cell$figure = cell.figure) === null || _cell$figure === void 0 ? void 0 : _cell$figure.color) === (currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color)) setSelectedCell(cell);\n    }\n  }\n  useEffect(() => {\n    highlightCells();\n  }, [selectedCell]);\n  function highlightCells() {\n    board.highlightCells(selectedCell);\n    updateBoard();\n  }\n  function updateBoard() {\n    const newBoard = board.getCopyBoard();\n    setBoard(newBoard);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\u0422\\u0435\\u043A\\u0443\\u0449\\u0438\\u0439 \\u0438\\u0433\\u0440\\u043E\\u043A \", currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.color]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.cells.map((row, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: row.map(cell => /*#__PURE__*/_jsxDEV(CellComponent, {\n          click: click,\n          cell: cell,\n          selected: cell.x === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.x) && cell.y === (selectedCell === null || selectedCell === void 0 ? void 0 : selectedCell.y)\n        }, cell.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(BoardComponent, \"OFVjm5mk704+5WCzFQLJg89Ag6Q=\");\n_c = BoardComponent;\nexport default BoardComponent;\nvar _c;\n$RefreshReg$(_c, \"BoardComponent\");","map":{"version":3,"names":["React","useEffect","useState","CellComponent","BoardComponent","board","setBoard","currentPlayer","swapPlayer","selectedCell","setSelectedCell","click","cell","figure","canMove","moveFigure","color","highlightCells","updateBoard","newBoard","getCopyBoard","cells","map","row","index","x","y","id"],"sources":["D:/ыыыы/Chess/src/components/BoardComponent.tsx"],"sourcesContent":["import React, {FC, useEffect, useState} from \"react\";\r\nimport {Board} from \"../models/Board\";\r\nimport CellComponent from \"./CellComponent\";\r\nimport {Cell} from \"../models/Cell\";\r\nimport {Player} from \"../models/Player\";\r\ninterface BoardProps\r\n{\r\n    board: Board;\r\n    setBoard: (board: Board) => void;\r\n    currentPlayer: Player | null;\r\n    swapPlayer: () => void;\r\n}\r\nconst BoardComponent: FC<BoardProps> = ({board, setBoard, currentPlayer, swapPlayer}) =>\r\n{\r\n    const [selectedCell, setSelectedCell] = useState<Cell | null>(null);\r\n    function click(cell: Cell)\r\n    {\r\n        if(selectedCell && selectedCell !== cell && selectedCell.figure?.canMove(cell))\r\n        {\r\n            selectedCell.moveFigure(cell);\r\n            swapPlayer();\r\n            setSelectedCell(null);\r\n        }\r\n        else\r\n        {\r\n            if(cell.figure?.color === currentPlayer?.color) setSelectedCell(cell);\r\n        }\r\n    }\r\n    useEffect(() =>{\r\n        highlightCells();\r\n    }, [selectedCell]);\r\n    function highlightCells()\r\n    {\r\n        board.highlightCells(selectedCell);\r\n        updateBoard();\r\n    }\r\n    function updateBoard()\r\n    {\r\n        const newBoard = board.getCopyBoard();\r\n        setBoard(newBoard);\r\n    }\r\n    return(\r\n        <div>\r\n            <h3>Текущий игрок {currentPlayer?.color}</h3>\r\n            <div className=\"board\">\r\n                {board.cells.map((row:Cell[], index: number) =>\r\n                    <React.Fragment key={index}>\r\n                        {row.map(cell =>\r\n                            <CellComponent\r\n                                click={click}\r\n                                cell={cell}\r\n                                key={cell.id}\r\n                                selected={cell.x === selectedCell?.x && cell.y === selectedCell?.y}\r\n                            />\r\n                        )}\r\n                    </React.Fragment>\r\n            )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAOC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAEpD,OAAOC,aAAa,MAAM,iBAAiB;AAAC;AAU5C,MAAMC,cAA8B,GAAG,QACvC;EAAA;EAAA,IADwC;IAACC,KAAK;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAU,CAAC;EAEhF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAc,IAAI,CAAC;EACnE,SAASS,KAAK,CAACC,IAAU,EACzB;IAAA;IACI,IAAGH,YAAY,IAAIA,YAAY,KAAKG,IAAI,4BAAIH,YAAY,CAACI,MAAM,iDAAnB,qBAAqBC,OAAO,CAACF,IAAI,CAAC,EAC9E;MACIH,YAAY,CAACM,UAAU,CAACH,IAAI,CAAC;MAC7BJ,UAAU,EAAE;MACZE,eAAe,CAAC,IAAI,CAAC;IACzB,CAAC,MAED;MAAA;MACI,IAAG,iBAAAE,IAAI,CAACC,MAAM,iDAAX,aAAaG,KAAK,OAAKT,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,KAAK,GAAEN,eAAe,CAACE,IAAI,CAAC;IACzE;EACJ;EACAX,SAAS,CAAC,MAAK;IACXgB,cAAc,EAAE;EACpB,CAAC,EAAE,CAACR,YAAY,CAAC,CAAC;EAClB,SAASQ,cAAc,GACvB;IACIZ,KAAK,CAACY,cAAc,CAACR,YAAY,CAAC;IAClCS,WAAW,EAAE;EACjB;EACA,SAASA,WAAW,GACpB;IACI,MAAMC,QAAQ,GAAGd,KAAK,CAACe,YAAY,EAAE;IACrCd,QAAQ,CAACa,QAAQ,CAAC;EACtB;EACA,oBACI;IAAA,wBACI;MAAA,yFAAmBZ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAES,KAAK;IAAA;MAAA;MAAA;MAAA;IAAA,QAAM,eAC7C;MAAK,SAAS,EAAC,OAAO;MAAA,UACjBX,KAAK,CAACgB,KAAK,CAACC,GAAG,CAAC,CAACC,GAAU,EAAEC,KAAa,kBACvC,QAAC,KAAK,CAAC,QAAQ;QAAA,UACVD,GAAG,CAACD,GAAG,CAACV,IAAI,iBACT,QAAC,aAAa;UACV,KAAK,EAAED,KAAM;UACb,IAAI,EAAEC,IAAK;UAEX,QAAQ,EAAEA,IAAI,CAACa,CAAC,MAAKhB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEgB,CAAC,KAAIb,IAAI,CAACc,CAAC,MAAKjB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEiB,CAAC;QAAC,GAD9Dd,IAAI,CAACe,EAAE;UAAA;UAAA;UAAA;QAAA,QAEd;MACL,GARgBH,KAAK;QAAA;QAAA;QAAA;MAAA,QAST;IACxB;MAAA;MAAA;MAAA;IAAA,QACK;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd,CAAC;AAAC,GAhDIpB,cAA8B;AAAA,KAA9BA,cAA8B;AAkDpC,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module"}