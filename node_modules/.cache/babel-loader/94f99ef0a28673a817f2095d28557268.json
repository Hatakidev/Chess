{"ast":null,"code":"export class Cell {\n  constructor(board, x, y, color, figure) {\n    this.x = void 0;\n    this.y = void 0;\n    this.color = void 0;\n    this.figure = void 0;\n    this.board = void 0;\n    this.availible = void 0;\n    this.id = void 0;\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.board = board;\n    this.figure = figure;\n    this.availible = false;\n    this.id = Math.random();\n  }\n  isEmpty() {\n    return this.figure !== null;\n  }\n  isEmptyVertical(target) {\n    if (this.x !== target.x) return false;\n    const min = Math.min(this.y, target.y);\n    const max = Math.max(this.y, target.y);\n    for (let i = min + 1; i < max; i++) {\n      if (this.board.getCell(this.x, i).isEmpty()) return false;\n    }\n    return true;\n  }\n  isEmptyHorizontal(target) {\n    if (this.y !== target.y) return false;\n    const min = Math.min(this.x, target.x);\n    const max = Math.max(this.x, target.x);\n    for (let i = min + 1; i < max; i++) {\n      if (this.board.getCell(i, this.y).isEmpty()) return false;\n    }\n    return true;\n  }\n  isEmptyDiagonal(target) {\n    const absX = Math.abs(target.x - this.x);\n    const absY = Math.abs(target.y - this.y);\n    if (absY !== absX) return false;\n    const dy = this.y < target.y ? 1 : -1;\n    const dx = this.x < target.x ? 1 : -1;\n    for (let i = 1; i < absY; i++) {\n      if (!this.board.getCell(this.x + dx * i, this.y + dy * i).isEmpty()) return false;\n    }\n    return true;\n  }\n  setFigure(figure) {\n    this.figure = figure;\n    this.figure.cell = this;\n  }\n  moveFigure(target) {\n    var _this$figure;\n    if (this.figure && (_this$figure = this.figure) !== null && _this$figure !== void 0 && _this$figure.canMove(target)) {\n      var _this$figure2;\n      (_this$figure2 = this.figure) === null || _this$figure2 === void 0 ? void 0 : _this$figure2.moveFigure(target);\n      target.setFigure(this.figure);\n      this.figure = null;\n    }\n  }\n}","map":{"version":3,"names":["Cell","constructor","board","x","y","color","figure","availible","id","Math","random","isEmpty","isEmptyVertical","target","min","max","i","getCell","isEmptyHorizontal","isEmptyDiagonal","absX","abs","absY","dy","dx","setFigure","cell","moveFigure","canMove"],"sources":["D:/chess/chess/src/models/Cell.ts"],"sourcesContent":["import { Board } from \"./Board\";\r\nimport { Colors } from \"./Colors\";\r\nimport { Figure } from \"./figures/Figure\";\r\n\r\nexport class Cell\r\n{\r\n    readonly x: number;\r\n    readonly y: number;\r\n    readonly color: Colors;\r\n    figure: Figure | null;\r\n    board: Board;\r\n    availible: boolean;\r\n    id: number;\r\n    constructor(board: Board,  x: number, y: number, color: Colors, figure: Figure | null )\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color;\r\n        this.board = board;\r\n        this.figure = figure;\r\n        this.availible = false;\r\n        this.id = Math.random();\r\n    }\r\n\r\n\r\n    isEmpty()\r\n    {\r\n        return this.figure !== null;\r\n    }\r\n    isEmptyVertical(target: Cell) : boolean\r\n    {\r\n        if(this.x !== target.x) return false;\r\n\r\n        const min = Math.min(this.y, target.y);\r\n        const max = Math.max(this.y, target.y);\r\n        for (let i = min + 1; i < max; i++)\r\n        {\r\n            if(this.board.getCell(this.x, i).isEmpty()) return false;\r\n        }\r\n        return true;\r\n    }\r\n    isEmptyHorizontal(target: Cell) : boolean\r\n    {\r\n        if(this.y !== target.y) return false;\r\n\r\n        const min = Math.min(this.x, target.x);\r\n        const max = Math.max(this.x, target.x);\r\n        for (let i = min + 1; i < max; i++)\r\n        {\r\n            if(this.board.getCell(i, this.y).isEmpty()) return false;\r\n        }\r\n        return true;\r\n    }\r\n    isEmptyDiagonal(target: Cell) : boolean\r\n    {\r\n        const absX = Math.abs(target.x - this.x);\r\n        const absY = Math.abs(target.y - this.y);\r\n        if(absY !== absX) return false;\r\n        const dy = this.y < target.y ? 1 : -1;\r\n        const dx = this.x < target.x ? 1 : -1;\r\n        for (let i = 1; i < absY; i++)\r\n        {\r\n            if(!this.board.getCell(this.x + dx*i, this.y + dy * i).isEmpty()) return false;\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n    setFigure(figure: Figure)\r\n    {\r\n        this.figure = figure;\r\n        this.figure.cell = this;\r\n    }\r\n    moveFigure(target: Cell)\r\n    {\r\n        if(this.figure && this.figure?.canMove(target))\r\n        {\r\n            this.figure?.moveFigure(target);\r\n            target.setFigure(this.figure);\r\n            this.figure = null;\r\n        }\r\n    }\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}