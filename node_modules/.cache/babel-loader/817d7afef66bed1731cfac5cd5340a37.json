{"ast":null,"code":"import { Cell } from './Cell';\nimport { Colors } from './Colors';\nimport { Pawn } from \"./figures/Pawn\";\nimport { King } from \"./figures/King\";\nimport { Queen } from \"./figures/Queen\";\nimport { Bishop } from \"./figures/Bishop\";\nimport { Knight } from \"./figures/Knight\";\nexport class Board {\n  constructor() {\n    this.cells = [];\n  }\n  createCells() {\n    for (let i = 0; i < 8; i++) {\n      const row = [];\n      for (let j = 0; j < 8; j++) {\n        if ((i + j) % 2 !== 0) {\n          row.push(new Cell(this, j, i, Colors.BLACK, null));\n        } else {\n          row.push(new Cell(this, j, i, Colors.WHITE, null));\n        }\n      }\n      this.cells.push(row);\n    }\n  }\n  getCopyBoard() {}\n  highlightCells(selectedCell) {\n    for (let i = 0; i < this.cells.length; i++) {\n      const row = this.cells[i];\n      for (let j = 0; j < row.length; j++) {\n        var _selectedCell$figure;\n        const target = row[j];\n        target.availible = !!(selectedCell !== null && selectedCell !== void 0 && (_selectedCell$figure = selectedCell.figure) !== null && _selectedCell$figure !== void 0 && _selectedCell$figure.canMove(target));\n      }\n    }\n  }\n  getCell(x, y) {\n    return this.cells[y][x];\n  }\n  addPawns() {\n    for (let i = 0; i < 8; i++) {\n      new Pawn(Colors.WHITE, this.getCell(i, 6));\n      new Pawn(Colors.BLACK, this.getCell(i, 1));\n    }\n  }\n  addKings() {\n    new King(Colors.WHITE, this.getCell(4, 7));\n    new King(Colors.BLACK, this.getCell(4, 0));\n  }\n  addQueens() {\n    new Queen(Colors.WHITE, this.getCell(3, 7));\n    new Queen(Colors.BLACK, this.getCell(3, 0));\n  }\n  addBishops() {\n    new Bishop(Colors.WHITE, this.getCell(2, 7));\n    new Bishop(Colors.BLACK, this.getCell(2, 0));\n    new Bishop(Colors.WHITE, this.getCell(5, 7));\n    new Bishop(Colors.BLACK, this.getCell(5, 0));\n  }\n  addRooks() {\n    new Bishop(Colors.WHITE, this.getCell(0, 7));\n    new Bishop(Colors.BLACK, this.getCell(0, 0));\n    new Bishop(Colors.WHITE, this.getCell(7, 7));\n    new Bishop(Colors.BLACK, this.getCell(7, 0));\n  }\n  addKnights() {\n    new Knight(Colors.WHITE, this.getCell(1, 7));\n    new Knight(Colors.BLACK, this.getCell(1, 0));\n    new Knight(Colors.WHITE, this.getCell(6, 7));\n    new Knight(Colors.BLACK, this.getCell(6, 0));\n  }\n  addFigures() {\n    this.addPawns();\n    this.addKnights();\n    this.addKings();\n    this.addBishops();\n    this.addRooks();\n    this.addQueens();\n  }\n}","map":{"version":3,"names":["Cell","Colors","Pawn","King","Queen","Bishop","Knight","Board","cells","createCells","i","row","j","push","BLACK","WHITE","getCopyBoard","highlightCells","selectedCell","length","target","availible","figure","canMove","getCell","x","y","addPawns","addKings","addQueens","addBishops","addRooks","addKnights","addFigures"],"sources":["D:/chess/chess/src/models/Board.ts"],"sourcesContent":["import {Cell} from './Cell';\r\nimport {Colors} from './Colors';\r\nimport {Pawn} from \"./figures/Pawn\";\r\nimport {King} from \"./figures/King\";\r\nimport {Queen} from \"./figures/Queen\";\r\nimport {Bishop} from \"./figures/Bishop\";\r\nimport {Knight} from \"./figures/Knight\";\r\n\r\nexport class Board\r\n{\r\n    cells: Cell[][] = []\r\n\r\n\r\n\r\n    public createCells()\r\n    {\r\n        for(let i = 0;i < 8;i++)\r\n        {\r\n            const row: Cell[] = []\r\n            for(let j = 0; j < 8; j++) \r\n            {\r\n                if((i + j) % 2 !== 0) \r\n                {\r\n                    row.push(new Cell(this, j, i, Colors.BLACK, null));\r\n                } \r\n                else \r\n                {\r\n                    row.push(new Cell(this, j, i, Colors.WHITE, null));\r\n                }\r\n            }\r\n            this.cells.push(row);\r\n        }\r\n    }\r\n    public getCopyBoard() : Board\r\n    {\r\n        \r\n    }\r\n    public highlightCells(selectedCell: Cell | null)\r\n    {\r\n        for (let i = 0; i < this.cells.length; i++)\r\n        {\r\n            const row = this.cells[i];\r\n            for (let j = 0; j < row.length; j++)\r\n            {\r\n                const target = row[j];\r\n                target.availible = !!selectedCell?.figure?.canMove(target);\r\n            }\r\n        }\r\n    }\r\n    public getCell(x: number, y: number)\r\n    {\r\n        return this.cells[y][x];\r\n    }\r\n    private addPawns()\r\n    {\r\n        for (let i = 0; i < 8; i++)\r\n        {\r\n            new Pawn(Colors.WHITE, this.getCell(i,6));\r\n            new Pawn(Colors.BLACK, this.getCell(i,1));\r\n        }\r\n    }\r\n    private addKings()\r\n    {\r\n        new King(Colors.WHITE, this.getCell(4,7));\r\n        new King(Colors.BLACK, this.getCell(4,0));\r\n    }\r\n    private addQueens()\r\n    {\r\n        new Queen(Colors.WHITE, this.getCell(3,7));\r\n        new Queen(Colors.BLACK, this.getCell(3,0));\r\n    }\r\n    private addBishops()\r\n    {\r\n        new Bishop(Colors.WHITE, this.getCell(2,7))\r\n        new Bishop(Colors.BLACK, this.getCell(2,0))\r\n        new Bishop(Colors.WHITE, this.getCell(5,7))\r\n        new Bishop(Colors.BLACK, this.getCell(5,0))\r\n    }\r\n    private addRooks()\r\n    {\r\n        new Bishop(Colors.WHITE, this.getCell(0,7))\r\n        new Bishop(Colors.BLACK, this.getCell(0,0))\r\n        new Bishop(Colors.WHITE, this.getCell(7,7))\r\n        new Bishop(Colors.BLACK, this.getCell(7,0))\r\n    }\r\n    private addKnights()\r\n    {\r\n        new Knight(Colors.WHITE, this.getCell(1,7))\r\n        new Knight(Colors.BLACK, this.getCell(1,0))\r\n        new Knight(Colors.WHITE, this.getCell(6,7))\r\n        new Knight(Colors.BLACK, this.getCell(6,0))\r\n    }\r\n\r\n    public addFigures()\r\n    {\r\n        this.addPawns();\r\n        this.addKnights();\r\n        this.addKings();\r\n        this.addBishops();\r\n        this.addRooks();\r\n        this.addQueens();\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}